#!/usr/local/bin/dot
#
# Class diagram 
# Generated by UMLGraph version R5_6-24-gf6e263 (http://www.umlgraph.org/)
#

digraph G {
	edge [fontname="Helvetica",fontsize=10,labelfontname="Helvetica",labelfontsize=10];
	node [fontname="Helvetica",fontsize=10,shape=plaintext];
	nodesep=0.25;
	ranksep=0.5;
	// de.tud.plt.r43ples.test.TestMultipleGraph
	c106 [label=<<table title="de.tud.plt.r43ples.test.TestMultipleGraph" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./TestMultipleGraph.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> TestMultipleGraph </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + TestMultipleGraph() </td></tr>
<tr><td align="left" balign="left"> + setUpBeforeClass() </td></tr>
<tr><td align="left" balign="left"> + testMultipleGraphs() </td></tr>
<tr><td align="left" balign="left"> + testMultipleGraphsQueryRewriting() </td></tr>
<tr><td align="left" balign="left"> + testResponseHeader() </td></tr>
<tr><td align="left" balign="left"> + testResponseHeader2() </td></tr>
		</table></td></tr>
		</table>>, URL="./TestMultipleGraph.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// de.tud.plt.r43ples.test.R43plesTest
	c109 [label=<<table title="de.tud.plt.r43ples.test.R43plesTest" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" bgcolor="lemonChiffon" href="./R43plesTest.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> R43plesTest </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # ep : Endpoint </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + R43plesTest() </td></tr>
<tr><td align="left" balign="left"> + check_isomorphism(result_set : String, result_set_format : String, expected_set : String, expected_set_format : String) : boolean </td></tr>
<tr><td align="left" balign="left"> + check_isomorphism(result_model : Model, expected_model : Model) : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="./R43plesTest.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// de.tud.plt.r43ples.test.merge.TestRebaseMerge
	c111 [label=<<table title="de.tud.plt.r43ples.test.merge.TestRebaseMerge" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./merge/TestRebaseMerge.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> TestRebaseMerge </td></tr>
<tr><td align="center" balign="center"> de.tud.plt.r43ples.test.merge </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + TestRebaseMerge() </td></tr>
<tr><td align="left" balign="left"> + setUpBeforeClass() </td></tr>
<tr><td align="left" balign="left"> + setUp() </td></tr>
<tr><td align="left" balign="left"> + testCreatedGraph() </td></tr>
<tr><td align="left" balign="left"> + testRebaseMerge1() </td></tr>
<tr><td align="left" balign="left"> + testRebaseMerge2() </td></tr>
<tr><td align="left" balign="left"> + testAutoRebaseMerge() </td></tr>
<tr><td align="left" balign="left"> + testCommonRebaseMerge() </td></tr>
		</table></td></tr>
		</table>>, URL="./merge/TestRebaseMerge.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// de.tud.plt.r43ples.test.merge.TestFastForwardMerge
	c112 [label=<<table title="de.tud.plt.r43ples.test.merge.TestFastForwardMerge" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./merge/TestFastForwardMerge.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> TestFastForwardMerge </td></tr>
<tr><td align="center" balign="center"> de.tud.plt.r43ples.test.merge </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + TestFastForwardMerge() </td></tr>
<tr><td align="left" balign="left"> + setUpBeforeClass() </td></tr>
<tr><td align="left" balign="left"> + setUp() </td></tr>
<tr><td align="left" balign="left"> + testFastForwardMerge() </td></tr>
		</table></td></tr>
		</table>>, URL="./merge/TestFastForwardMerge.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// de.tud.plt.r43ples.test.merge.TestThreeWayMerge
	c114 [label=<<table title="de.tud.plt.r43ples.test.merge.TestThreeWayMerge" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="./merge/TestThreeWayMerge.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> TestThreeWayMerge </td></tr>
<tr><td align="center" balign="center"> de.tud.plt.r43ples.test.merge </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + TestThreeWayMerge() </td></tr>
<tr><td align="left" balign="left"> + setUpBeforeClass() </td></tr>
<tr><td align="left" balign="left"> + setUp() </td></tr>
<tr><td align="left" balign="left"> + testCreatedGraph() </td></tr>
<tr><td align="left" balign="left"> + testAutoMerge() </td></tr>
<tr><td align="left" balign="left"> + testCommonMerge() </td></tr>
<tr><td align="left" balign="left"> + testManualMerge() </td></tr>
		</table></td></tr>
		</table>>, URL="./merge/TestThreeWayMerge.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	//de.tud.plt.r43ples.test.TestMultipleGraph extends de.tud.plt.r43ples.test.R43plesTest
	c109:p -> c106:p [dir=back,arrowtail=empty];
	//de.tud.plt.r43ples.test.merge.TestRebaseMerge extends de.tud.plt.r43ples.test.R43plesTest
	c109:p -> c111:p [dir=back,arrowtail=empty];
	//de.tud.plt.r43ples.test.merge.TestFastForwardMerge extends de.tud.plt.r43ples.test.R43plesTest
	c109:p -> c112:p [dir=back,arrowtail=empty];
	//de.tud.plt.r43ples.test.merge.TestThreeWayMerge extends de.tud.plt.r43ples.test.R43plesTest
	c109:p -> c114:p [dir=back,arrowtail=empty];
	// de.tud.plt.r43ples.test.R43plesTest NAVASSOC de.tud.plt.r43ples.webservice.Endpoint
	c109:p -> c122:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open];
	// de.tud.plt.r43ples.test.R43plesTest DEPEND com.hp.hpl.jena.rdf.model.Model
	c109:p -> c138:p [taillabel="", label="", headlabel="", fontname="Helvetica", fontcolor="black", fontsize=10.0, color="black", arrowhead=open, style=dashed];
	// com.hp.hpl.jena.rdf.model.Model
	c138 [label=<<table title="com.hp.hpl.jena.rdf.model.Model" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/com/hp/hpl/jena/rdf/model/Model.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> &#171;interface&#187; </td></tr>
<tr><td align="center" balign="center"> Model </td></tr>
<tr><td align="center" balign="center"> com.hp.hpl.jena.rdf.model </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left">  </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + size() : long </td></tr>
<tr><td align="left" balign="left"> + isEmpty() : boolean </td></tr>
<tr><td align="left" balign="left"> + listSubjects() : com.hp.hpl.jena.rdf.model.ResIterator </td></tr>
<tr><td align="left" balign="left"> + listNameSpaces() : com.hp.hpl.jena.rdf.model.NsIterator </td></tr>
<tr><td align="left" balign="left"> + getResource(arg0 : java.lang.String) : com.hp.hpl.jena.rdf.model.Resource </td></tr>
<tr><td align="left" balign="left"> + getProperty(arg0 : java.lang.String, arg1 : java.lang.String) : com.hp.hpl.jena.rdf.model.Property </td></tr>
<tr><td align="left" balign="left"> + createResource() : com.hp.hpl.jena.rdf.model.Resource </td></tr>
<tr><td align="left" balign="left"> + createResource(arg0 : com.hp.hpl.jena.rdf.model.AnonId) : com.hp.hpl.jena.rdf.model.Resource </td></tr>
<tr><td align="left" balign="left"> + createResource(arg0 : java.lang.String) : com.hp.hpl.jena.rdf.model.Resource </td></tr>
<tr><td align="left" balign="left"> + createProperty(arg0 : java.lang.String, arg1 : java.lang.String) : com.hp.hpl.jena.rdf.model.Property </td></tr>
<tr><td align="left" balign="left"> + createLiteral(arg0 : java.lang.String, arg1 : java.lang.String) : com.hp.hpl.jena.rdf.model.Literal </td></tr>
<tr><td align="left" balign="left"> + createLiteral(arg0 : java.lang.String, arg1 : boolean) : com.hp.hpl.jena.rdf.model.Literal </td></tr>
<tr><td align="left" balign="left"> + createTypedLiteral(arg0 : java.lang.String, arg1 : com.hp.hpl.jena.datatypes.RDFDatatype) : com.hp.hpl.jena.rdf.model.Literal </td></tr>
<tr><td align="left" balign="left"> + createTypedLiteral(arg0 : java.lang.Object, arg1 : com.hp.hpl.jena.datatypes.RDFDatatype) : com.hp.hpl.jena.rdf.model.Literal </td></tr>
<tr><td align="left" balign="left"> + createTypedLiteral(arg0 : java.lang.Object) : com.hp.hpl.jena.rdf.model.Literal </td></tr>
<tr><td align="left" balign="left"> + createStatement(arg0 : com.hp.hpl.jena.rdf.model.Resource, arg1 : com.hp.hpl.jena.rdf.model.Property, arg2 : com.hp.hpl.jena.rdf.model.RDFNode) : com.hp.hpl.jena.rdf.model.Statement </td></tr>
<tr><td align="left" balign="left"> + createList() : com.hp.hpl.jena.rdf.model.RDFList </td></tr>
<tr><td align="left" balign="left"> + createList(arg0 : java.util.Iterator&lt;?&gt;) : com.hp.hpl.jena.rdf.model.RDFList </td></tr>
<tr><td align="left" balign="left"> + createList(arg0 : com.hp.hpl.jena.rdf.model.RDFNode[]) : com.hp.hpl.jena.rdf.model.RDFList </td></tr>
<tr><td align="left" balign="left"> + add(arg0 : com.hp.hpl.jena.rdf.model.Statement) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + add(arg0 : com.hp.hpl.jena.rdf.model.Statement[]) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + remove(arg0 : com.hp.hpl.jena.rdf.model.Statement[]) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + add(arg0 : java.util.List&lt;com.hp.hpl.jena.rdf.model.Statement&gt;) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + remove(arg0 : java.util.List&lt;com.hp.hpl.jena.rdf.model.Statement&gt;) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + add(arg0 : com.hp.hpl.jena.rdf.model.StmtIterator) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + add(arg0 : com.hp.hpl.jena.rdf.model.Model) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + read(arg0 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + read(arg0 : java.io.InputStream, arg1 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + read(arg0 : java.io.InputStream, arg1 : java.lang.String, arg2 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + read(arg0 : java.io.Reader, arg1 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + read(arg0 : java.lang.String, arg1 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + read(arg0 : java.io.Reader, arg1 : java.lang.String, arg2 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + read(arg0 : java.lang.String, arg1 : java.lang.String, arg2 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + write(arg0 : java.io.Writer) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + write(arg0 : java.io.Writer, arg1 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + write(arg0 : java.io.Writer, arg1 : java.lang.String, arg2 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + write(arg0 : java.io.OutputStream) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + write(arg0 : java.io.OutputStream, arg1 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + write(arg0 : java.io.OutputStream, arg1 : java.lang.String, arg2 : java.lang.String) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + remove(arg0 : com.hp.hpl.jena.rdf.model.Statement) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + getRequiredProperty(arg0 : com.hp.hpl.jena.rdf.model.Resource, arg1 : com.hp.hpl.jena.rdf.model.Property) : com.hp.hpl.jena.rdf.model.Statement </td></tr>
<tr><td align="left" balign="left"> + getProperty(arg0 : com.hp.hpl.jena.rdf.model.Resource, arg1 : com.hp.hpl.jena.rdf.model.Property) : com.hp.hpl.jena.rdf.model.Statement </td></tr>
<tr><td align="left" balign="left"> + listSubjectsWithProperty(arg0 : com.hp.hpl.jena.rdf.model.Property) : com.hp.hpl.jena.rdf.model.ResIterator </td></tr>
<tr><td align="left" balign="left"> + listResourcesWithProperty(arg0 : com.hp.hpl.jena.rdf.model.Property) : com.hp.hpl.jena.rdf.model.ResIterator </td></tr>
<tr><td align="left" balign="left"> + listSubjectsWithProperty(arg0 : com.hp.hpl.jena.rdf.model.Property, arg1 : com.hp.hpl.jena.rdf.model.RDFNode) : com.hp.hpl.jena.rdf.model.ResIterator </td></tr>
<tr><td align="left" balign="left"> + listResourcesWithProperty(arg0 : com.hp.hpl.jena.rdf.model.Property, arg1 : com.hp.hpl.jena.rdf.model.RDFNode) : com.hp.hpl.jena.rdf.model.ResIterator </td></tr>
<tr><td align="left" balign="left"> + listObjects() : com.hp.hpl.jena.rdf.model.NodeIterator </td></tr>
<tr><td align="left" balign="left"> + listObjectsOfProperty(arg0 : com.hp.hpl.jena.rdf.model.Property) : com.hp.hpl.jena.rdf.model.NodeIterator </td></tr>
<tr><td align="left" balign="left"> + listObjectsOfProperty(arg0 : com.hp.hpl.jena.rdf.model.Resource, arg1 : com.hp.hpl.jena.rdf.model.Property) : com.hp.hpl.jena.rdf.model.NodeIterator </td></tr>
<tr><td align="left" balign="left"> + contains(arg0 : com.hp.hpl.jena.rdf.model.Resource, arg1 : com.hp.hpl.jena.rdf.model.Property) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsResource(arg0 : com.hp.hpl.jena.rdf.model.RDFNode) : boolean </td></tr>
<tr><td align="left" balign="left"> + contains(arg0 : com.hp.hpl.jena.rdf.model.Resource, arg1 : com.hp.hpl.jena.rdf.model.Property, arg2 : com.hp.hpl.jena.rdf.model.RDFNode) : boolean </td></tr>
<tr><td align="left" balign="left"> + contains(arg0 : com.hp.hpl.jena.rdf.model.Statement) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAny(arg0 : com.hp.hpl.jena.rdf.model.StmtIterator) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAll(arg0 : com.hp.hpl.jena.rdf.model.StmtIterator) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAny(arg0 : com.hp.hpl.jena.rdf.model.Model) : boolean </td></tr>
<tr><td align="left" balign="left"> + containsAll(arg0 : com.hp.hpl.jena.rdf.model.Model) : boolean </td></tr>
<tr><td align="left" balign="left"> + isReified(arg0 : com.hp.hpl.jena.rdf.model.Statement) : boolean </td></tr>
<tr><td align="left" balign="left"> + getAnyReifiedStatement(arg0 : com.hp.hpl.jena.rdf.model.Statement) : com.hp.hpl.jena.rdf.model.Resource </td></tr>
<tr><td align="left" balign="left"> + removeAllReifications(arg0 : com.hp.hpl.jena.rdf.model.Statement) </td></tr>
<tr><td align="left" balign="left"> + removeReification(arg0 : com.hp.hpl.jena.rdf.model.ReifiedStatement) </td></tr>
<tr><td align="left" balign="left"> + listStatements() : com.hp.hpl.jena.rdf.model.StmtIterator </td></tr>
<tr><td align="left" balign="left"> + listStatements(arg0 : com.hp.hpl.jena.rdf.model.Selector) : com.hp.hpl.jena.rdf.model.StmtIterator </td></tr>
<tr><td align="left" balign="left"> + listStatements(arg0 : com.hp.hpl.jena.rdf.model.Resource, arg1 : com.hp.hpl.jena.rdf.model.Property, arg2 : com.hp.hpl.jena.rdf.model.RDFNode) : com.hp.hpl.jena.rdf.model.StmtIterator </td></tr>
<tr><td align="left" balign="left"> + createReifiedStatement(arg0 : com.hp.hpl.jena.rdf.model.Statement) : com.hp.hpl.jena.rdf.model.ReifiedStatement </td></tr>
<tr><td align="left" balign="left"> + createReifiedStatement(arg0 : java.lang.String, arg1 : com.hp.hpl.jena.rdf.model.Statement) : com.hp.hpl.jena.rdf.model.ReifiedStatement </td></tr>
<tr><td align="left" balign="left"> + listReifiedStatements() : com.hp.hpl.jena.rdf.model.RSIterator </td></tr>
<tr><td align="left" balign="left"> + listReifiedStatements(arg0 : com.hp.hpl.jena.rdf.model.Statement) : com.hp.hpl.jena.rdf.model.RSIterator </td></tr>
<tr><td align="left" balign="left"> + query(arg0 : com.hp.hpl.jena.rdf.model.Selector) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + union(arg0 : com.hp.hpl.jena.rdf.model.Model) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + intersection(arg0 : com.hp.hpl.jena.rdf.model.Model) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + difference(arg0 : com.hp.hpl.jena.rdf.model.Model) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + equals(arg0 : java.lang.Object) : boolean </td></tr>
<tr><td align="left" balign="left"> + begin() : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + abort() : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + commit() : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + executeInTransaction(arg0 : com.hp.hpl.jena.shared.Command) : java.lang.Object </td></tr>
<tr><td align="left" balign="left"> + independent() : boolean </td></tr>
<tr><td align="left" balign="left"> + supportsTransactions() : boolean </td></tr>
<tr><td align="left" balign="left"> + supportsSetOperations() : boolean </td></tr>
<tr><td align="left" balign="left"> + isIsomorphicWith(arg0 : com.hp.hpl.jena.rdf.model.Model) : boolean </td></tr>
<tr><td align="left" balign="left"> + close() </td></tr>
<tr><td align="left" balign="left"> + getLock() : com.hp.hpl.jena.shared.Lock </td></tr>
<tr><td align="left" balign="left"> + register(arg0 : com.hp.hpl.jena.rdf.model.ModelChangedListener) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + unregister(arg0 : com.hp.hpl.jena.rdf.model.ModelChangedListener) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + notifyEvent(arg0 : java.lang.Object) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + removeAll() : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + removeAll(arg0 : com.hp.hpl.jena.rdf.model.Resource, arg1 : com.hp.hpl.jena.rdf.model.Property, arg2 : com.hp.hpl.jena.rdf.model.RDFNode) : com.hp.hpl.jena.rdf.model.Model </td></tr>
<tr><td align="left" balign="left"> + isClosed() : boolean </td></tr>
		</table></td></tr>
		</table>>, URL="http://java.sun.com/j2se/1.4.2/docs/api/com/hp/hpl/jena/rdf/model/Model.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
	// de.tud.plt.r43ples.webservice.Endpoint
	c122 [label=<<table title="de.tud.plt.r43ples.webservice.Endpoint" border="0" cellborder="1" cellspacing="0" cellpadding="2" port="p" href="http://java.sun.com/j2se/1.4.2/docs/api/de/tud/plt/r43ples/webservice/Endpoint.html">
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="center" balign="center"> Endpoint </td></tr>
<tr><td align="center" balign="center"> de.tud.plt.r43ples.webservice </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> # clientMap : java.util.HashMap&lt;java.lang.String, java.util.HashMap&lt;java.lang.String, de.tud.plt.r43ples.merging.ui.MergingControl&gt;&gt; </td></tr>
		</table></td></tr>
		<tr><td><table border="0" cellspacing="0" cellpadding="1">
<tr><td align="left" balign="left"> + Endpoint() </td></tr>
<tr><td align="left" balign="left"> + sparqlPOST(arg0 : java.lang.String, arg1 : java.lang.String, arg2 : java.lang.String) : javax.ws.rs.core.Response </td></tr>
<tr><td align="left" balign="left"> + sparqlPOSTdirectly(arg0 : java.lang.String) : javax.ws.rs.core.Response </td></tr>
<tr><td align="left" balign="left"> + sparqlGET(arg0 : java.lang.String, arg1 : java.lang.String, arg2 : java.lang.String) : javax.ws.rs.core.Response </td></tr>
<tr><td align="left" balign="left"> + sparql(arg0 : java.lang.String, arg1 : java.lang.String, arg2 : boolean) : javax.ws.rs.core.Response </td></tr>
<tr><td align="left" balign="left"> + sparql(arg0 : java.lang.String, arg1 : java.lang.String) : javax.ws.rs.core.Response </td></tr>
<tr><td align="left" balign="left"> + sparql(arg0 : java.lang.String) : javax.ws.rs.core.Response </td></tr>
		</table></td></tr>
		</table>>, URL="http://java.sun.com/j2se/1.4.2/docs/api/de/tud/plt/r43ples/webservice/Endpoint.html", fontname="Helvetica", fontcolor="black", fontsize=10.0];
}

